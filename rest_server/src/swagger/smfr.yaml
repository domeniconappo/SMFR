swagger: '2.0'
info:
  title: SMFR Rest Server
  description: SMFR Rest API
  version: '1.0'
consumes:
  - application/json
produces:
  - application/json

paths:

  /users:
    get:
      tags: [users]
      operationId: server.api.users.get_users
      summary: Get all users
      responses:
        200:
          description: Users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: Bad JSON formatting in the request
    post:
      tags: [users]
      operationId: server.api.users.signup
      summary: Register an user
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
          description: The user account to create
      responses:
        201:
          description: New user was created successfully
          schema:
            $ref: '#/definitions/User'
          headers:
            Location:
              type: string
              description: The Server returns the URL of the new user
        400:
          description: Bad JSON formatting in the request

  /users/{email}:
    get:
      tags: [users]
      operationId: server.api.users.get_user
      summary: Get an user by email
      parameters:
        - in: path
          name: email
          type: string
          required: true
          description: Numeric ID of the stored collector to start.
      responses:
        200:
          description: User
          schema:
            type: object
            $ref: '#/definitions/User'
        400:
          description: Bad JSON formatting in the request

  /users/signin:
    post:
      tags: [users]
      operationId: server.api.users.signin
      summary: Login an user
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/Login'
          description: The user account to login
      responses:
        201:
          description: User was logged successfully
          schema:
            $ref: '#/definitions/User'
        400:
          description: Bad JSON formatting in the request


  /collections:
    post:
      tags: [collections]
      operationId: server.api.collections.add_collection
      summary: Submit a new collection
      consumes:
        - multipart/form-data
      parameters:
        - in: body
          name: payload
          schema:
            $ref: '#/definitions/CollectionPayload'
          description: Collection arguments
      responses:
        201:
          description: Return created collection
          schema:
            type: object
            $ref: '#/definitions/Collection'
    get:
      tags: [collections]
      operationId: server.api.collections.get
      summary: Get all collections defined in SMFR
      responses:
        200:
          description: Return all collections
          schema:
            type: array
            items:
              $ref: '#/definitions/Collection'

  /collections/active:
    get:
      tags: [collections]
      operationId: server.api.collections.get_running_collections
      summary: Get _running collectors
      responses:
        200:
          description: Return collectors
          schema:
            type: array
            items:
              $ref: '#/definitions/Collection'

  /collections/{collection_id}/start:
    post:
      tags: [collections]
      operationId: server.api.collections.start_collection
      parameters:
        - in: path
          name: collection_id
          type: integer
          required: true
          description: Collection ID to start.
      summary: Start a previously defined collector
      responses:
        204:
          description: The collector was started successfully.

  /collections/{collection_id}/stop:
    post:
      tags: [collections]
      operationId: server.api.collections.stop_collection
      parameters:
        - in: path
          name: collection_id
          type: integer
          required: true
          description: Collection ID to stop.
      summary: Stop a previously defined and running collector
      responses:
        204:
          description: The collector was stopped successfully.

  /collections/{collection_id}/remove:
    post:
      tags: [collections]
      operationId: server.api.collections.remove_collection
      parameters:
        - in: path
          name: collection_id
          type: integer
          required: true
          description: Collection ID as stored in MySQL DB
      summary: Remove a collection from the system
      responses:
        204:
          description: The collection was removed successfully

  /collections/{collection_id}:
    get:
      tags: [collections]
      operationId: server.api.collections.get_collection_details
      parameters:
        - in: path
          name: collection_id
          type: integer
          required: true
          description: Collection ID as stored in MySQL DB
      summary: Details of a collection
      responses:
        200:
          description: The collection was removed successfully
          schema:
            type: object
            $ref: '#/definitions/CollectionResponse'

  /collections/{collection_id}/geo:
    post:
      tags: [collections]
      operationId: server.api.collections.geolocalize
      parameters:
        - in: path
          name: collection_id
          type: integer
          required: true
          description: Collection ID as stored in MySQL DB
        - in: query
          name: startdate
          type: string
          format: date-time
          description: Start date
        - in: query
          name: enddate
          type: string
          format: date-time
          description: End date
      summary: Start Geotagging annotated tweets for this collection
      responses:
        204:
          description: Annotated tweets are starting to be geotagged...

  /collections/{collection_id}/annotate:
    post:
      tags: [collections]
      operationId: server.api.collections.annotate
      parameters:
        - in: path
          name: collection_id
          type: integer
          required: true
          description: Collection ID as stored in MySQL DB
        - in: query
          name: lang
          type: string
          description: Language model to use for annotations
          required: true
          default: en
        - in: query
          name: startdate
          type: string
          format: date-time
          description: Start date
        - in: query
          name: enddate
          type: string
          format: date-time
          description: End date
      summary: Annotate (classify) tweets for this collection
      responses:
        204:
          description: Collected tweets are starting to be annotated...

  /collections/fetch_efas:
    get:
      tags: [collections]
      operationId: server.api.collections.fetch_efas
      parameters:
        - in: query
          name: since
          type: string
          description: fetch EFAS events since <from>
          required: true
          default: latest
      summary: Fetch efas results
      responses:
        200:
          description: Fetched OK

  /collections/add_ondemand:
    post:
      tags: [collections]
      operationId: server.api.collections.add_ondemand
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/OnDemandPayload'

          description: The on demand collection to create
      summary: Fetch efas results
      responses:
        201:
          description: Added collections


definitions:

  Aggregation:
    type: object
    properties:
      id:
        type: integer
      collection_id:
        type: integer
      data:
        type: object
      last_tweetid_annotated:
        type: integer
      last_tweetid_collected:
        type: integer
      last_tweetid_geotagged:
        type: integer
      timestamp_start:
        type: string
        format: date-time
      timestamp_end:
        type: string
        format: date-time


  Collection:
    type: object
    properties:
      id:
        type: integer
      trigger:
        type: string
        enum: [background, on-demand, manual]
      forecast_id:
        type: string
      tracking_keywords:
        type: array
        items:
          type: string
      locations:
        type: object
      languages:
        type: array
        items:
          type: string
      runtime:
        type: string
        format: date-time
      nuts2:
        type: string
      status:
        type: string
        enum: [active, inactive]
      started_at:
        type: string
        format: date-time
      stopped_at:
        type: string
        format: date-time
      bboxfinder:
        type: string
      bounding_box:
        type: string

  CollectionPayload:
    type: object
    required: [trigger]
    properties:
      tzclient:
        type: string
      trigger:
        type: string
        enum: [background, manual]
      forecast_id:
        type: string
      runtime:
        type: string
        format: date-time
      nuts2:
        type: string
      keywords:
        type: string
      bounding_box:
        type: object
      configuration:
        type: object


  OnDemandPayload:
    type: object
    properties:
      tzclient:
        type: string
      efas_id:
        type: integer
      forecast:
        type: string
      keywords:
        type: string
      trigger:
        type: string
        enum: [on-demand]
      bbox:
        type: object
      lead_time:
        type: integer
      nuts:
        type: string
      tz:
        type: string

  CollectionStats:
    type: object
    properties:
      tweets_count:
        type: integer
      tweets_annotated:
        type: integer
      tweets_geotagged:
        type: integer
      tweets_day_avg:
        type: number
        format: float

  CollectionTweetSample:
    type: object
    required:
      - tweetid
      - tweet
      - created_at
    properties:
      tweetid:
        type: string
      collectionid:
        type: integer
      tweet:
        type: object
      annotations:
        type: object
      nuts3:
        type: string
      latlong:
        type: array
        items:
          type: number
          format: float
        minItems: 2
        maxItems: 2
      ttype:
        type: string
        enum: [annotated, collected, geotagged]
      created_at:
        type: string
        format: date-time


  CollectionResponse:
    type: object
    properties:
      collection:
        $ref: '#/definitions/Collection'
      stats:
        $ref: '#/definitions/CollectionStats'
      running_annotators:
        type: array
        items:
          type: object
      samples:
        type: array
        items:
          $ref: '#/definitions/CollectionTweetSample'

  # A simple username/password combo for logging in
  Login:
    required: [email, password]
    properties:
      email:
        type: string
        minLength: 1
      password:
        type: string
        minLength: 1

  # The user schema is defined in the "user.yaml" file.
  # Swagger-Server will automatically convert the user.yaml
  # file to JSON format
  User:
    description: a registered user
    required: [email]
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
        minLength: 8
        maxLength: 200
        pattern: "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$"
        description: username must be unique
      password_hash:
        type: string
        description: Hashed Password

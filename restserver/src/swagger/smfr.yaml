swagger: '2.0'
info:
  title: SMFR Rest Server
  description: SMFR Rest API
  version: '1.0'
consumes:
  - application/json
produces:
  - application/json

paths:

# COLLECTORS / STREAMERS

  /admin:
    get:
      tags: [collectors]
      operationId: server.api.admin.get
      summary: Get all collectors defined in SMFR
      responses:
        200:
          description: Return all collectors
          schema:
            type: array
            items:
              $ref: '#/definitions/Admin'

  /admin/{trigger_type}/restart:
    post:
      tags: [collectors]
      operationId: server.api.admin.restart_collectors
      parameters:
      - in: path
        name: trigger_type
        type: string
        required: true
        description: Collector/Streamer type to start.
      summary: Restart a collector
      responses:
        204:
          description: The collector was started successfully.


# COLLECTIONS

  /collections:
    post:
      tags: [collections]
      operationId: server.api.collections.add_collection
      summary: Submit a new collection
      parameters:
        - in: body
          name: payload
          schema:
            $ref: '#/definitions/CollectionPayload'
          description: Collection arguments
      responses:
        201:
          description: Return created collection
          schema:
            type: object
            $ref: '#/definitions/Collection'
    get:
      tags: [collections]
      operationId: server.api.collections.get
      summary: Get all collections defined in SMFR
      responses:
        200:
          description: Return all collections
          schema:
            type: array
            items:
              $ref: '#/definitions/Collection'

  /collections/running:
    get:
      tags: [collections]
      operationId: server.api.collections.get_running_collections
      summary: Get _running collectors
      responses:
        200:
          description: Return collectors
          schema:
            type: array
            items:
              $ref: '#/definitions/Collection'

  /collections/active:
    get:
      tags: [collections]
      operationId: server.api.collections.get_active_collections
      summary: Get _running collectors
      responses:
        200:
          description: Return collectors
          schema:
            type: array
            items:
              $ref: '#/definitions/Collection'

  /collections/{collection_id}/start:
    post:
      tags: [collections]
      operationId: server.api.collections.start_collection
      parameters:
        - in: path
          name: collection_id
          type: integer
          required: true
          description: Collection ID to start.
      summary: Start a previously defined collector
      responses:
        204:
          description: The collector was started successfully.

  /collections/{collection_id}/stop:
    post:
      tags: [collections]
      operationId: server.api.collections.stop_collection
      parameters:
        - in: path
          name: collection_id
          type: integer
          required: true
          description: Collection ID to stop.
      summary: Stop a previously defined and running collector
      responses:
        204:
          description: The collector was stopped successfully.

  /collections/{collection_id}/remove:
    post:
      tags: [collections]
      operationId: server.api.collections.remove_collection
      parameters:
        - in: path
          name: collection_id
          type: integer
          required: true
          description: Collection ID as stored in MySQL DB
      summary: Remove a collection from the system
      responses:
        204:
          description: The collection was removed successfully

  /collections/{collection_id}:
    get:
      tags: [collections]
      operationId: server.api.collections.get_collection_details
      parameters:
        - in: path
          name: collection_id
          type: integer
          required: true
          description: Collection ID as stored in MySQL DB
      summary: Details of a collection
      responses:
        200:
          description: The collection was removed successfully
          schema:
            type: object
            $ref: '#/definitions/CollectionResponse'

  /collections/{collection_id}/startgeo:
    post:
      tags: [collections]
      operationId: server.api.collections.geolocalize
      parameters:
        - in: path
          name: collection_id
          type: integer
          required: true
          description: Collection ID as stored in MySQL DB
        - in: query
          name: startdate
          type: string
          format: date-time
          description: Start date
        - in: query
          name: enddate
          type: string
          format: date-time
          description: End date
      summary: Starting Geotagging annotated tweets for this collection
      responses:
        204:
          description: Starting geocoding


  /collections/{collection_id}/startannotate:
    post:
      tags: [collections]
      operationId: server.api.collections.annotate
      parameters:
        - in: path
          name: collection_id
          type: integer
          required: true
          description: Collection ID as stored in MySQL DB
        - in: query
          name: startdate
          type: string
          format: date-time
          description: Start date
        - in: query
          name: enddate
          type: string
          format: date-time
          description: End date
      summary: Annotate tweets for this collection
      responses:
        204:
          description: Starting annotation

  /collections/{collection_id}/stopgeo:
    post:
      tags: [collections]
      operationId: server.api.collections.stopgeolocalize
      parameters:
      - in: path
        name: collection_id
        type: integer
        required: true
        description: Collection ID as stored in MySQL DB
      summary: Stop Geotagging
      responses:
        204:
          description: Stopping geocoding


  /collections/{collection_id}/stopannotate:
    post:
      tags: [collections]
      operationId: server.api.collections.stopannotate
      parameters:
      - in: path
        name: collection_id
        type: integer
        required: true
        description: Collection ID as stored in MySQL DB
      summary: Stop annotation
      responses:
        204:
          description: Stooping annotation

  /collections/fetch_efas:
    get:
      tags: [collections]
      operationId: server.api.collections.fetch_efas
      parameters:
        - in: query
          name: since
          type: string
          description: fetch EFAS events since <from>
          required: true
          default: latest
      summary: Fetch efas results
      responses:
        200:
          description: Fetched OK

  /collections/add_ondemand:
    post:
      tags: [collections]
      operationId: server.api.collections.add_ondemand
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/OnDemandPayload'

          description: The on demand collection to create
      summary: Fetch efas results
      responses:
        201:
          description: Added collections


definitions:

  Aggregation:
    type: object
    properties:
      id:
        type: integer
      collection_id:
        type: integer
      data:
        type: object
      trends:
        type: object
      last_tweetid_annotated:
        type: integer
      last_tweetid_collected:
        type: integer
      last_tweetid_geotagged:
        type: integer
      timestamp_start:
        type: string
        format: date-time
      timestamp_end:
        type: string
        format: date-time

  Nuts2:
    type: object
    properties:
      id:
        type: integer
      efas_id:
        type: integer
      efas_name:
        type: string
      efas_country:
        type: string
      nuts_id:
        type: string
      country_code:
        type: string
      country_code3:
        type: string

  Collection:
    type: object
    properties:
      id:
        type: integer
      trigger:
        type: string
        enum: [background, on-demand, manual]
      forecast_id:
        type: string
      tracking_keywords:
        type: array
        items:
          type: string
      centroid:
        type: array
        items:
          type: number
          format: float
      locations:
        type: object
      languages:
        type: array
        items:
          type: string
      runtime:
        type: string
        format: date-time
      efas_id:
        type: integer
      efas_name:
        type: string
      efas_country:
        type: string
      nuts2:
        $ref: '#/definitions/Nuts2'
      status:
        type: string
        enum: [active, inactive]
      started_at:
        type: string
        format: date-time
      stopped_at:
        type: string
        format: date-time
      bboxfinder:
        type: string
      bounding_box:
        type: string
      is_using_pipeline:
        type: boolean

  CollectionPayload:
    type: object
    required: [trigger]
    properties:
      tzclient:
        type: string
      trigger:
        type: string
        enum: [background, manual]
      forecast_id:
        type: string
      runtime:
        type: string
        format: date-time
      nuts2:
        type: string
      keywords:
        type: string
      languages:
        type: string
      bounding_box:
        type: object
      configuration:
        type: object
      use_pipeline:
        type: boolean

  OnDemandPayload:
    type: object
    properties:
      tzclient:
        type: string
      efas_id:
        type: integer
      forecast:
        type: string
      keywords:
        type: string
      trigger:
        type: string
        enum: [on-demand]
      bbox:
        type: object
      lead_time:
        type: integer
      nuts:
        type: string
      tz:
        type: string

  CollectionStats:
    type: object
    properties:
      tweets_count:
        type: integer
      tweets_annotated:
        type: integer
      tweets_geotagged:
        type: integer
      tweets_day_avg:
        type: number
        format: float

  CollectionTweetSample:
    type: object
    required:
      - tweetid
      - tweet
      - created_at
    properties:
      tweetid:
        type: string
      collectionid:
        type: integer
      tweet:
        type: object
      annotations:
        type: object
      nuts3:
        type: string
      latlong:
        type: array
        items:
          type: number
          format: float
        minItems: 2
        maxItems: 2
      ttype:
        type: string
        enum: [annotated, collected, geotagged]
      created_at:
        type: string
        format: date-time


  CollectionResponse:
    type: object
    properties:
      collection:
        $ref: '#/definitions/Collection'
      stats:
        $ref: '#/definitions/CollectionStats'
      running_annotators:
        type: array
        items:
          type: object
      samples:
        type: array
        items:
          $ref: '#/definitions/CollectionTweetSample'


  Collector:
    type: object
    properties:
      trigger_type:
        type: string
        enum: [background, on-demand, manual]
      status:
        type: string
        enum: [connected, disconnected]
      collections:
        type: array
        items:
          type: number
          format: integer
      errors:
        type: array
        items:
          type: string
      apikeys:
        type: array
        items:
          type: string

  Admin:
    type: object
    properties:
      collectors:
        type: array
        items:
          $ref: '#/definitions/Collector'
      counters:
        type: object
      persisted:
        type: object


  # A simple username/password combo for logging in
  Login:
    required: [email, password]
    properties:
      email:
        type: string
        minLength: 1
      password:
        type: string
        minLength: 1

  # The user schema is defined in the "user.yaml" file.
  # Swagger-Server will automatically convert the user.yaml
  # file to JSON format
  User:
    description: a registered user
    required: [email]
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
        minLength: 8
        maxLength: 200
        pattern: "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$"
        description: username must be unique
      password_hash:
        type: string
        description: Hashed Password

version: '3.4'

services:

  geonames:
    build:
      context: ./
      dockerfile: geonames/Dockerfile
    image: efas/geonames
    restart: always
    working_dir: /geonames
    container_name: geonames
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      ES_JAVA_OPTS: "-Xms4g -Xmx4g"
    volumes:
      - '${SMFR_DATADIR}/geonames_index:/var/lib/elasticsearch/elasticsearch:rw'
    deploy:
      placement:
        constraints: [node.role == manager]

  cassandrasmfr:
    image: alexcheng/cassandra:latest
    restart: always
    # From host, connect to DB with `docker exec -it cassandra cqlsh`
    volumes:
      - '${SMFR_DATADIR}/cassandra:/var/lib/cassandra:rw'
    container_name: cassandrasmfr
    ports:
      - '9042:9042'
      - '9160:9160'
      - '7000:7000'
      - '7001:7001'
      - '7199:7199'
    cap_add:
      - ALL
    privileged: true
    environment:
      MAX_HEAP_SIZE: 8G
      HEAP_NEWSIZE: 1024M
      JVM_OPTS: "-Xms2g -Xmx8g"
      CASSANDRA_START_RPC: "true"
      CASSANDRA_LISTEN_ADDRESS: "auto"
      CASSANDRA_RPC_ADDRESS: 0.0.0.0
    deploy:
      placement:
        constraints: [node.role == manager]

  kafka:
    restart: always
    image: spotify/kafka
    container_name: kafka
    hostname: kafka
    environment:
      ADVERTISED_PORT: 9092
      ADVERTISED_HOST: kafka
    depends_on:
      - cassandrasmfr
    ports:
      - '9092:9092'
      - '2181:2181'
    deploy:
      placement:
        constraints:
          - node.id == ${NODE1}

  mysql:
    image: mysql:latest
    restart: always
    container_name: mysql
    # From host, connect to DB with `mysql -h 127.0.0.1 -p` (if you have mysql client installed)
    # or using docker exec: `docker exec -it mysql mysql -h 127.0.0.1 -p'
    ports:
      - '3306:3306'
    volumes:
      - '${SMFR_DATADIR}/mysql:/var/lib/mysql:rw'
    environment:
      MYSQL_ROOT_PASSWORD: example
      MYSQL_DATABASE: smfr
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
    deploy:
      placement:
        constraints: [node.role == manager]

  myadmin:
    image: phpmyadmin/phpmyadmin:latest
    restart: always
    container_name: myadmin
    ports:
      - '8383:80'
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: smfr
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
      PMA_ARBITRARY: 1
    deploy:
      placement:
        constraints:
          - node.id == ${NODE2}
    depends_on:
      - mysql

  persister:
    restart: always
    container_name: persister
    image: efas/persister:${current_branch}
    build:
      context: ./
      dockerfile: Dockerfile.persister.ready
    working_dir: /persister
    environment:
      LOGGING_LEVEL: ${LOGGING_LEVEL}
      PYTHONUNBUFFERED: 'true'
      CASSANDRA_KEYSPACE: ${CASSANDRA_KEYSPACE}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      KAFKA_BOOTSTRAP_SERVER: ${KAFKA_BOOTSTRAP_SERVER}
      CASSANDRA_HOST: ${CASSANDRA_HOST}
      CASSANDRA_PORT: ${CASSANDRA_PORT}
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
    volumes:
      - './persister/src:/persister'
    depends_on:
      - kafka
      - cassandrasmfr
    deploy:
      placement:
        constraints:
          - node.id == ${NODE1}

  annotator:
    restart: always
    container_name: annotator
    image: efas/annotator:${current_branch}
    build:
      context: ./
      dockerfile: Dockerfile.annotator.ready
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
        models_repo: ${GIT_REPO_MODELS}
    working_dir: /annotator
    ports:
      - '5556:5556'
    environment:
      LOGGING_LEVEL: ${LOGGING_LEVEL}
      PYTHONUNBUFFERED: 'true'
      RESTSERVER_PORT: 5555
      RESTSERVER_BASEPATH: '/1.0'
      CASSANDRA_KEYSPACE: ${CASSANDRA_KEYSPACE}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      KAFKA_BOOTSTRAP_SERVER: ${KAFKA_BOOTSTRAP_SERVER}
      CASSANDRA_HOST: ${CASSANDRA_HOST}
      CASSANDRA_PORT: ${CASSANDRA_PORT}
      MODELS_PATH: /models
      GIT_REPO_MODELS: ${GIT_REPO_MODELS}
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
    volumes:
      - './annotator/src:/annotator'
    depends_on:
      - kafka
      - cassandrasmfr
      - persister
    deploy:
      placement:
        constraints: [node.role == manager]

  geocoder:
    restart: always
    container_name: geocoder
    image: efas/geocoder:${current_branch}
    build:
      context: ./
      dockerfile: Dockerfile.geocoder.ready
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
    working_dir: /geocoder
    volumes:
      - './geocoder/src:/geocoder'
    ports:
      - '5557:5557'
    environment:
      LOGGING_LEVEL: ${LOGGING_LEVEL}
      PYTHONUNBUFFERED: 'true'
      RESTSERVER_PORT: 5555
      RESTSERVER_BASEPATH: '/1.0'
      CASSANDRA_KEYSPACE: ${CASSANDRA_KEYSPACE}
      MIN_FLOOD_PROBABILITY: ${MIN_FLOOD_PROBABILITY}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      CASSANDRA_HOST: ${CASSANDRA_HOST}
      CASSANDRA_PORT: ${CASSANDRA_PORT}
      NUTS3_GEOJSON: GlobalRegions_052018.geojson
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
    depends_on:
      - kafka
      - cassandrasmfr
      - geonames
      - persister
    deploy:
      placement:
        constraints:
          - node.id == ${NODE1}

  restserver:
    restart: always
    container_name: restserver
    image: efas/restserver:${current_branch}
    build:
      context: ./
      dockerfile: Dockerfile.restserver.ready
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
    working_dir: /rest_server
    environment:
      CASSANDRA_HOST: ${CASSANDRA_HOST}
      CASSANDRA_PORT: ${CASSANDRA_PORT}
      LOGGING_LEVEL: ${LOGGING_LEVEL}
      PYTHONUNBUFFERED: 'true'
      FLASK_APP: smfr.py
      SERVER_PATH_UPLOADS: /smfr/uploads/
      KERAS_BACKEND: tensorflow
      MYSQL_HOST: mysql
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      CQLENG_ALLOW_SCHEMA_MANAGEMENT: 1
      RESTSERVER_PORT: 5555
      RESTSERVER_BASEPATH: '/1.0'
      http_proxy: ${http_proxy}
      https_proxy: ${http_proxy}
    ports:
      - '5555:5555'
    volumes:
      - './rest_server/src:/rest_server'
    depends_on:
      - mysql
      - kafka
      - cassandrasmfr
      - annotator
      - geocoder
      - persister
    volumes:
      - /restserver/uploads:/smfr/uploads/
    deploy:
      placement:
        constraints:
          - node.id == ${NODE1}

  web:
    restart: always
    container_name: web
    image: efas/web:${current_branch}
    build:
      context: ./
      dockerfile: Dockerfile.web.ready
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${http_proxy}
    working_dir: /app
    volumes:
      - './web/src:/app'
    environment:
      PYTHONUNBUFFERED: 'true'
      RESTSERVER_PORT: 5555
      RESTSERVER_BASEPATH: '/1.0'
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
    ports:
      - '8888:8888'
    depends_on:
      - restserver
    deploy:
      placement:
        constraints:
          - node.id == ${NODE2}

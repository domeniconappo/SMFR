version: '3.4'

services:

#  kafka:
#    restart: always
#    image: ${DOCKER_REGISTRY}/${KAFKA_IMAGE}
#    container_name: kafka
#    hostname: kafka
#    environment:
#      ADVERTISED_PORT: 9092
#      ADVERTISED_HOST: kafka
#      AUTO_CREATE_TOPICS: "true"  # true by default anyway
#    depends_on:
#    - cassandrasmfr
#    ports:
#    - '9092:9092'
#    - '2181:2181'
#    networks:
#    - back-tier
#
#    deploy:
#      restart_policy:
#        condition: on-failure
#        max_attempts: 3
#        window: 120s
#      placement:
#        constraints: [ node.labels.medium == true ]

  zookeeper:
    restart: always
    image: ${DOCKER_REGISTRY}/${ZOOKEEPER_IMAGE}
    container_name: zookeeper
    hostname: zookeeper
    ports:
    - '2181:2181'
    networks:
    - back-tier

    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
      placement:
        constraints: [ node.labels.medium == true ]

  kafka:
    restart: always
    image: ${DOCKER_REGISTRY}/${KAFKA_IMAGE}
    container_name: kafka
    hostname: kafka
    environment:
#      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      HOSTNAME_COMMAND: "echo kafka"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://kafka:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: OUTSIDE
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://kafka:9094
#      BROKER_ID_COMMAND: -1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'  # true by default anyway
      KAFKA_CREATE_TOPICS: '${PERSISTER_KAFKA_TOPIC}:1:1,${ANNOTATOR_KAFKA_TOPIC}:1:1,${GEOCODER_KAFKA_TOPIC}:1:1'
      KAFKA_MAX_BLOCK_MS: 30000
      KAFKA_REQUEST_TIMEOUT_MS: 60000
      KAFKA_MAX_POLL_RECORDS: 100
      KAFKA_MAX_POLL_INTERVAL_MS: 30000
    ports:
      - target: 9094
        published: 9094
        protocol: tcp
        mode: host
    networks:
    - back-tier
    depends_on:
    - zookeeper
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock

    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
      placement:
        constraints: [ node.labels.medium == true ]

  cassandrasmfr:
    build:
      context: ./
      dockerfile: cassandrasmfr/Dockerfile
    image: ${DOCKER_REGISTRY}/${CASSANDRA_IMAGE}:${image_tag}
    restart: always
    # From host, connect to DB with `docker exec -it cassandrasmfr cqlsh`
    volumes:
      - '${SMFR_DATADIR}/cassandra:/var/lib/cassandra:rw'
    container_name: cassandrasmfr
    networks:
      - back-tier
    ports:
      - '9042:9042'
      - '9160:9160'
      - '7000:7000'
      - '7001:7001'
      - '7199:7199'
    cap_add:
      - ALL
    privileged: true
    environment:
      # CASSANDRA_CLUSTER_NAME: SMFR (need to rename cluster_name in system.local table first) !!!
      MAX_HEAP_SIZE: 8G
      HEAP_NEWSIZE: 1024M
      JVM_OPTS: -Xms4g -Xmx8g -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.password.file=/etc/cassandra/jmxremote.password -Dcom.sun.management.jmxremote.access.file=/etc/cassandra/jmxremote.access
      CASSANDRA_START_RPC: "true"
      CASSANDRA_LISTEN_ADDRESS: auto
      CASSANDRA_RPC_ADDRESS: 0.0.0.0
      LOCAL_JMX: "no"
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 60s
      placement:
        constraints: [ node.labels.large == true ]

  mysql:
    build:
      context: ./
      dockerfile: mysql/Dockerfile
    image: ${DOCKER_REGISTRY}/${MYSQL_IMAGE}:${image_tag}
    restart: always
    container_name: mysql
    # From host, connect to DB with `mysql -h 127.0.0.1 -p` (if you have mysql client installed)
    # or using docker exec: `docker exec -it mysql mysql -h 127.0.0.1 -p'
    ports:
      - '3306:3306'
    volumes:
      - '${SMFR_DATADIR}/mysql:/var/lib/mysql:rw'
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DBNAME}
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
    networks:
      - back-tier

    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
      placement:
        constraints: [ node.labels.large == true ]

  geonames:
    build:
      context: ./
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
      dockerfile: geonames/Dockerfile
    image: ${DOCKER_REGISTRY}/${GEONAMES_IMAGE}:${image_tag}
    restart: always
    working_dir: /geonames
    container_name: geonames
    ports:
      - '9200:9200'
      - '9300:9300'
    networks:
      - back-tier

    environment:
      bootstrap.memory_lock: 'true'
      discovery.type: 'single-node'
    volumes:
      - geonames_index:/usr/share/elasticsearch/data:rw
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
      placement:
        constraints: [ node.labels.huge == true ]

  persister:
    restart: always
    container_name: persister
    image: ${DOCKER_REGISTRY}/${PERSISTER_IMAGE}:${image_tag}
    build:
      context: ./
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
      dockerfile: Dockerfile.persister.ready
    working_dir: /persister
    environment:
      LOGGING_LEVEL: ${LOGGING_LEVEL}
      PYTHONUNBUFFERED: 'true'
      PERSISTER_KAFKA_TOPIC: ${PERSISTER_KAFKA_TOPIC}
      KAFKA_BOOTSTRAP_SERVER: ${KAFKA_BOOTSTRAP_SERVER}
      CASSANDRA_HOST: ${CASSANDRA_HOST}
      CASSANDRA_PORT: ${CASSANDRA_PORT}
      CASSANDRA_USER: ${CASSANDRA_USER}
      CASSANDRA_PASSWORD: ${CASSANDRA_PASSWORD}
      CASSANDRA_KEYSPACE: ${CASSANDRA_KEYSPACE}
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
    volumes:
      - './persister/src:/persister'
    networks:
      - back-tier

    depends_on:
      - kafka
      - cassandrasmfr
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
      placement:
        constraints: [ node.labels.large == true ]

  annotator:
    restart: always
    container_name: annotator
    image: ${DOCKER_REGISTRY}/${ANNOTATOR_IMAGE}:${image_tag}
    build:
      context: ./
      dockerfile: Dockerfile.annotator.ready
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
        models_repo: ${GIT_REPO_MODELS}
    working_dir: /annotator
    ports:
      - '5556:5556'
      - '6006:6006'
    networks:
      - back-tier

    environment:
      LOGGING_LEVEL: ${LOGGING_LEVEL}
      TF_CPP_MIN_LOG_LEVEL: '2'
      PYTHONUNBUFFERED: 'true'
      KERAS_BACKEND: tensorflow
      PERSISTER_KAFKA_TOPIC: ${PERSISTER_KAFKA_TOPIC}
      ANNOTATOR_KAFKA_TOPIC: ${ANNOTATOR_KAFKA_TOPIC}
      DEVELOPMENT: ${DEVELOPMENT}
      KAFKA_BOOTSTRAP_SERVER: ${KAFKA_BOOTSTRAP_SERVER}
      CASSANDRA_HOST: ${CASSANDRA_HOST}
      CASSANDRA_PORT: ${CASSANDRA_PORT}
      CASSANDRA_USER: ${CASSANDRA_USER}
      CASSANDRA_PASSWORD: ${CASSANDRA_PASSWORD}
      CASSANDRA_KEYSPACE: ${CASSANDRA_KEYSPACE}
      MYSQL_HOST: mysql
      MYSQL_DBNAME: ${MYSQL_DBNAME}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MODELS_PATH: /models
      GIT_REPO_MODELS: ${GIT_REPO_MODELS}
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
    volumes:
      - './annotator/src:/annotator'
    depends_on:
      - kafka
      - cassandrasmfr
      - persister
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
      placement:
        constraints: [ node.labels.huge == true ]

  geocoder:
    restart: always
    container_name: geocoder
    image: ${DOCKER_REGISTRY}/${GEOCODER_IMAGE}:${image_tag}
    build:
      context: ./
      dockerfile: Dockerfile.geocoder.ready
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
    working_dir: /geocoder
    volumes:
      - './geocoder/src:/geocoder'
    ports:
      - '5557:5557'
      - '6007:6006'
    environment:
      LOGGING_LEVEL: ${LOGGING_LEVEL}
      TF_CPP_MIN_LOG_LEVEL: '2'
      PYTHONUNBUFFERED: 'true'
      PERSISTER_KAFKA_TOPIC: ${PERSISTER_KAFKA_TOPIC}
      GEOCODER_KAFKA_TOPIC: ${GEOCODER_KAFKA_TOPIC}
      CASSANDRA_HOST: ${CASSANDRA_HOST}
      CASSANDRA_PORT: ${CASSANDRA_PORT}
      CASSANDRA_USER: ${CASSANDRA_USER}
      CASSANDRA_PASSWORD: ${CASSANDRA_PASSWORD}
      CASSANDRA_KEYSPACE: ${CASSANDRA_KEYSPACE}
      MYSQL_HOST: mysql
      MYSQL_DBNAME: ${MYSQL_DBNAME}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
    networks:
      - back-tier

    depends_on:
      - kafka
      - cassandrasmfr
      - geonames
      - persister
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
      placement:
        constraints: [ node.labels.huge == true ]

  aggregator:
    networks:
      - back-tier
    restart: on-failure
    container_name: aggregator
    image: ${DOCKER_REGISTRY}/${AGGREGATOR_IMAGE}:${image_tag}
    build:
      context: ./
      dockerfile: Dockerfile.aggregator.ready
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
    working_dir: /aggregator
    volumes:
      - './aggregator/src:/aggregator'
    environment:
      LOGGING_LEVEL: ${LOGGING_LEVEL}
      PYTHONUNBUFFERED: "true"
      CASSANDRA_KEYSPACE: ${CASSANDRA_KEYSPACE}
      CASSANDRA_HOST: ${CASSANDRA_HOST}
      CASSANDRA_PORT: ${CASSANDRA_PORT}
      CASSANDRA_USER: ${CASSANDRA_USER}
      CASSANDRA_PASSWORD: ${CASSANDRA_PASSWORD}
      AGGREGATOR_SCHEDULING_MINUTES: ${AGGREGATOR_SCHEDULING_MINUTES}
      MYSQL_HOST: mysql
      MYSQL_DBNAME: ${MYSQL_DBNAME}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
    command: -- python3.6 start.py ${AGGREGATOR_RUN_CONF}

    depends_on:
      - mysql
      - cassandrasmfr
    deploy:
      placement:
        constraints: [ node.labels.large == true ]
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s

#  products:
#    restart: on-failure
#    container_name: products
#    image: ${DOCKER_REGISTRY}/${PRODUCTS_IMAGE}:${image_tag}
#    build:
#      context: ./
#      dockerfile: Dockerfile.products.ready
#      args:
#        http_proxy: ${http_proxy}
#        https_proxy: ${https_proxy}
#    working_dir: /products
#    volumes:
#    - './products/src:/products'
#    environment:
#      LOGGING_LEVEL: ${LOGGING_LEVEL}
#      PYTHONUNBUFFERED: "true"
#      CASSANDRA_KEYSPACE: ${CASSANDRA_KEYSPACE}
#      CASSANDRA_HOST: ${CASSANDRA_HOST}
#      CASSANDRA_PORT: ${CASSANDRA_PORT}
#      CASSANDRA_USER: ${CASSANDRA_USER}
#      CASSANDRA_PASSWORD: ${CASSANDRA_PASSWORD}
#      PERSISTER_KAFKA_TOPIC: ${PERSISTER_KAFKA_TOPIC}
#      PRODUCTS_SCHEDULING_MINUTES: ${PRODUCTS_SCHEDULING_MINUTES}
#      MYSQL_HOST: mysql
#      MYSQL_DBNAME: ${MYSQL_DBNAME}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#      http_proxy: ${http_proxy}
#      https_proxy: ${https_proxy}
#    networks:
#      - back-tier
#    depends_on:
#    - mysql
#    - cassandrasmfr
#    deploy:
#      placement:
#        constraints: [ node.labels.medium == true ]
#      restart_policy:
#        condition: on-failure
#        max_attempts: 3
#        window: 120s

  restserver:
    restart: always
    networks:
      - front-tier
      - back-tier
    container_name: restserver
    image: ${DOCKER_REGISTRY}/${RESTSERVER_IMAGE}:${image_tag}
    build:
      context: ./
      dockerfile: Dockerfile.restserver.ready
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
        ftp_host: ${FTP_HOST}
        download_folder: ${DOWNLOAD_FOLDER}
    working_dir: /rest_server
    environment:
      PERSISTER_KAFKA_TOPIC: ${PERSISTER_KAFKA_TOPIC}
      MYSQL_HOST: mysql
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DBNAME: ${MYSQL_DBNAME}
      CASSANDRA_HOST: ${CASSANDRA_HOST}
      CASSANDRA_PORT: ${CASSANDRA_PORT}
      CASSANDRA_USER: ${CASSANDRA_USER}
      CASSANDRA_PASSWORD: ${CASSANDRA_PASSWORD}
      CASSANDRA_KEYSPACE: ${CASSANDRA_KEYSPACE}
      RESTSERVER_PORT: ${RESTSERVER_PORT}
      ANNOTATOR_PORT: ${ANNOTATOR_PORT}
      GEOCODER_PORT: ${GEOCODER_PORT}
      FLASK_APP: smfr.py
      SERVER_PATH_UPLOADS: /smfr/uploads/
      CQLENG_ALLOW_SCHEMA_MANAGEMENT: 1
      DEVELOPMENT: ${DEVELOPMENT}
      RESTSERVER_BASEPATH: '/1.0'
      FTP_USER: ${FTP_USER}
      FTP_PASS: ${FTP_PASS}
      FTP_HOST: ${FTP_HOST}
      FTP_PATH: ${FTP_PATH}
      DOWNLOAD_FOLDER: ${DOWNLOAD_FOLDER}
      RRA_ONDEMAND_FILENAME: ${RRA_ONDEMAND_FILENAME}
      PYTHONUNBUFFERED: 'true'
      http_proxy: ${http_proxy}
      https_proxy: ${http_proxy}
      LOGGING_LEVEL: ${LOGGING_LEVEL}
    ports:
      - '5555:5555'
    volumes:
      - './rest_server/src:/rest_server'
      - './uploads:/smfr/uploads/'
      - './downloads:/smfr/downloaded/'
    depends_on:
      - mysql
      - kafka
      - cassandrasmfr
      - annotator
      - geocoder
      - persister
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
      placement:
        constraints: [ node.labels.huge == true ]

  web:
    restart: always
    container_name: web
    image: ${DOCKER_REGISTRY}/${WEB_IMAGE}:${image_tag}
    build:
      context: ./
      dockerfile: Dockerfile.web.ready
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${http_proxy}
    working_dir: /app
    volumes:
      - './web/src:/app'
    environment:
      PYTHONUNBUFFERED: 'true'
      RESTSERVER_PORT: ${RESTSERVER_PORT}
      RESTSERVER_BASEPATH: '/1.0'
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
    ports:
      - '8888:8888'
    depends_on:
      - restserver
      - aggregator
    networks:
      - front-tier
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
      placement:
        constraints: [ node.labels.small == true ]

volumes:
  geonames_index:

networks:
  front-tier:
  back-tier:

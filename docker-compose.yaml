version: '3.4'

services:

  geonames:
    build:
      context: ./
      dockerfile: geonames/Dockerfile
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
    image: efas/geonames
    working_dir: /geonames
    container_name: geonames
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      ES_JAVA_OPTS: "-Xms2g -Xmx2g"
    volumes:
      - '${SMFR_DATADIR}/geonames_index:/var/lib/elasticsearch/elasticsearch:rw'
    deploy:
      placement:
        constraints: [node.role == manager]

  cassandra:
    image: cassandra:latest
    restart: always
    # From host, connect to DB with `docker exec -it cassandra cqlsh`
    volumes:
      - '${SMFR_DATADIR}/cassandra:/var/lib/cassandra:rw'
    container_name: cassandra
    ports:
      - '9042:9042'
      - '7000:7000'
    cap_add:
      - ALL
    privileged: true
    environment:
      MAX_HEAP_SIZE: 4G
      HEAP_NEWSIZE: 256M
    deploy:
      placement:
        constraints: [node.role == manager]

  kafka:
    restart: always
    image: spotify/kafka
    container_name: kafka
    hostname: kafka
    environment:
      ADVERTISED_PORT: 9092
      ADVERTISED_HOST: kafka
    depends_on:
      - cassandra
    ports:
      - '9092:9092'
      - '2181:2181'
    deploy:
      placement:
        constraints:
          - node.id == ${NODE1}

  mysql:
    image: mysql:latest
    restart: always
    container_name: mysql
    # From host, connect to DB with `mysql -h 127.0.0.1 -p` (if you have mysql client installed)
    # or using docker exec: `docker exec -it mysql mysql -h 127.0.0.1 -p'
    ports:
      - '3306:3306'
    volumes:
      - '${SMFR_DATADIR}/mysql:/var/lib/mysql:rw'
    environment:
      MYSQL_ROOT_PASSWORD: example
      MYSQL_DATABASE: smfr
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
    deploy:
      placement:
        constraints: [node.role == manager]

  annotator:
    restart: always
    container_name: annotator
    image: efas/annotator
    build:
      context: ./
      dockerfile: annotator/Dockerfile
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
        models_repo: ${GIT_REPO_MODELS}
    working_dir: /annotator
#    volumes:
#      - './annotator/src:/annotator'
#      - './annotator/scripts:/scripts'
    ports:
      - '5556:5556'
    environment:
      LOGGING_LEVEL: ${LOGGING_LEVEL}
      PYTHONUNBUFFERED: 'true'
      RESTSERVER_PORT: 5555
      RESTSERVER_BASEPATH: '/1.0'
      CASSANDRA_KEYSPACE: ${CASSANDRA_KEYSPACE}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      CASSANDRA_HOST: cassandra
      MODELS_PATH: /models
      GIT_REPO_MODELS: ${GIT_REPO_MODELS}
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
    depends_on:
      - kafka
      - cassandra
    deploy:
      placement:
        constraints:
          - node.id == ${NODE2}

  geocoder:
    restart: always
    container_name: geocoder
    image: efas/geocoder
    build:
      context: ./
      dockerfile: geocoder/Dockerfile
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
    working_dir: /geocoder
#    volumes:
#      - './geocoder/src:/geocoder'
#      - './geocoder/scripts:/scripts'
    ports:
      - '5557:5557'
    environment:
      LOGGING_LEVEL: ${LOGGING_LEVEL}
      PYTHONUNBUFFERED: 'true'
      RESTSERVER_PORT: 5555
      RESTSERVER_BASEPATH: '/1.0'
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      CASSANDRA_KEYSPACE: ${CASSANDRA_KEYSPACE}
      MIN_FLOOD_PROBABILITY: ${MIN_FLOOD_PROBABILITY}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      CASSANDRA_HOST: cassandra
    depends_on:
      - kafka
      - cassandra
      - geonames
    deploy:
      placement:
        constraints:
          - node.id == ${NODE1}

  restserver:
    restart: always
    container_name: restserver
    image: efas/restserver
    build:
      context: ./
      dockerfile: rest_server/Dockerfile
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
    working_dir: /rest_server
    environment:
      LOGGING_LEVEL: ${LOGGING_LEVEL}
      PYTHONUNBUFFERED: 'true'
      FLASK_APP: smfr.py
      SERVER_PATH_UPLOADS: /smfr/uploads/
      KERAS_BACKEND: tensorflow
      MYSQL_HOST: mysql
      CQLENG_ALLOW_SCHEMA_MANAGEMENT: 1
      RESTSERVER_PORT: 5555
      RESTSERVER_BASEPATH: '/1.0'
      http_proxy: ${http_proxy}
      https_proxy: ${http_proxy}
    ports:
      - '5555:5555'
    depends_on:
      - mysql
      - kafka
      - cassandra
      - annotator
      - geocoder
#    volumes:
#      - './rest_server/src:/rest_server'
#      - './rest_server/scripts:/scripts'
#      - './uploads:/smfr/uploads/'
    deploy:
      placement:
        constraints:
          - node.id == ${NODE1}

  web:
    restart: always
    container_name: web
    image: efas/web
    build:
      context: ./
      dockerfile: web/Dockerfile
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${http_proxy}
    working_dir: /web
    environment:
      PYTHONUNBUFFERED: 'true'
      RESTSERVER_PORT: 5555
      RESTSERVER_BASEPATH: '/1.0'
    ports:
      - '8888:8888'
    depends_on:
      - restserver
#    volumes:
#      - './web/src:/web'
    deploy:
      placement:
        constraints:
          - node.id == ${NODE2}
